name: Build USUKernel A14 with KernelSU

on:
  workflow_call:
  workflow_dispatch:
  
jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      
      - name: Install necessary packages
        run: |
          lsb_release -a
          UBUNTU_VERSION=$(lsb_release -sr)
          sudo apt-get update
          if [ $UBUNTU_VERSION == "22.04" ]; then
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 dos2unix libncurses5
            sudo apt-get install p7zip p7zip-full -y
            sudo ls -lah /usr/bin/ | grep "python"
          else
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler dos2unix libncurses5
            sudo apt-get install zstd libc6 binutils libc6-dev-i386 gcc g++ p7zip p7zip-full -y
            sudo ls -lah /usr/bin/ | grep "python"
          fi
            
      - name: Setup kernel source
        uses: actions/checkout@v4
        with:
          ref:
          path: kernel-source

      - name: Add KernelSU setup.sh
        run: |
          cd kernel-source
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs

      - name: Setup submodules
        working-directory: kernel-source
        run: git submodule update --init --recursive --depth 0

      - name: Cache Build Tools
        id: cache-aosp-clang
        uses: actions/cache@v4
        with:
          path: aosp-clang
          key: aosp-clang-${{ runner.os }}-${{ github.ref }}-${{ matrix.device }}

      - name: Download Build Tools
        if: steps.cache-aosp-clang.outputs.cache-hit != 'true'
        run: |
          git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 --single-branch --no-tags -b master aosp-clang/clang
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aach64/aarch64-linux-android-4.9 -b android-14.0.0_r0.47 --depth=1 --single-branch --no-tagsaosp-clang/aarch64-linux-android-4.9

      - name: Checkout Anykernel
        uses: actions/checkout@v4
        with:
          submodules: true
          repository: mads2570/AnyKernel3
          ref:
          path: anykernel

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: Build-USUKernel-${{ matrix.device }}
          save: ${{ github.event_name != 'pull_request' }}
          max-size: 2G
          path-filter: |
           **/*.c
           **/*.h
           **/*.S
           **/*.s
           **/*.dts
           **/Makefile
           **/.config
           **/scripts/*

      - name: Fix Unsupported Character in mkdtimg and Grant Permissions
        run: |
          sh fix-mkdtimg.sh
          chmod u+x /home/runner/work/a42xq-kernelSu/a42xq-kernelSu/kernel-source//tools/mkdtimg
          chmod u+x /home/runner/work/a42xq-kernelSu/a42xq-kernelSu/kernel-source//tools/mkdtimg

      - name: Build Kernel
        working-directory: kernel-source
        run: |
          CLANG="$GITHUB_WORKSPACE/aosp-clang/clang/bin"
          GCC64="$GITHUB_WORKSPACE/aosp-clang/aarch64-linux-android-4.9/bin"
          PATH=$CLANG:$GCC64:$PATH
          export PATH
          export ARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export KERNEL_MAKE_ENV="DTC_EXT=$(pwd)/tools/dtc CONFIG_BUILD_ARM64_DT_OVERLAY=y"
          output_dir=out
          date=$(date +"%Y%m%d%H%M")
          export PATH="/usr/lib/ccache:$PATH"
          echo "date=$date" >> $GITHUB_ENV
          echo "Building kernel with $args"
          make -C $(pwd) O=out $KERNEL_MAKE_ENV CC="ccache clang" LLVM=1 LLVM_IAS=1 vendor/a42xq_eur_open_defconfig && make O=out $KERNEL_MAKE_ENV CC="ccache clang" LLVM=1 LLVM_IAS=1 -j$(grep -c ^processor /proc/cpuinfo)
          $GITHUB_WORKSPACE/kernel-source//tools/mkdtimg create $GITHUB_WORKSPACE/kernel-source/out/arch/arm64/boot/dtbo.img --page_size=4096 $(find out/arch/arm64/boot/dts/samsung/a42/a42xq/ -name *.dtbo)

      - name: Prepare Anykernel
        working-directory: anykernel
        run: |
          rm -f zip_up_kernel.sh
          cp $GITHUB_WORKSPACE/kernel-source/out/arch/arm64/boot/Image .
          cp $GITHUB_WORKSPACE/kernel-source/out/arch/arm64/boot/dtbo.img ./dtbo
          cp $GITHUB_WORKSPACE/kernel-source/out/arch/arm64/boot/dts/vendor/qcom/lagoon.dtb ./dtb
          ZIP_NAME="USUKernel_For_${{ matrix.device }}"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          zip -r "$ZIP_NAME.zip" *
          if [ ! -f "$GITHUB_WORKSPACE/$ZIP_NAME.zip" ]; then
            mv "$ZIP_NAME.zip" $GITHUB_WORKSPACE
          fi

      - name: Upload Anykernel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: anykernel/*

      - name: Zip Kernel Source
        run: |
          ZIP_NAME="source_for_usu_kernel"
          echo "Listing files before zipping:"
          rm -rf $GITHUB_WORKSPACE/kernel-source/out/*
          rm -rf $GITHUB_WORKSPACE/aosp-clang/*
          ls -R kernel-source
          # Find all files and directories in kernel-source and exclude the 'out' folder
          find kernel-source -type f | zip -r "$ZIP_NAME.zip" -@
          echo "Listing files in workspace:"
          ls -l $GITHUB_WORKSPACE
          # Check if the zip file already exists before moving
          echo "Before move: $(pwd)/$ZIP_NAME.zip"
          if [ ! -f "$GITHUB_WORKSPACE/$ZIP_NAME.zip" ]; then
            mv "$ZIP_NAME.zip" $GITHUB_WORKSPACE
          fi
          echo "After move: $GITHUB_WORKSPACE/$ZIP_NAME.zip"

      - name: Release Kernel Source
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ github.ref_name }}_source_for_usu_kernel"
          files: |
            ${{ github.workspace }}/source_for_usu_kernel.zip

      - name: Release Kernel
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ github.ref_name }}_USUKernel_For_${{ matrix.device }}"
          files: |
            ${{ env.ZIP_NAME }}.zip
